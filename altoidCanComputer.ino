// Include application, user and local libraries
#include "SPI.h"
#include "TFT_22_ILI9225.h"



#define TFT_RST 9
#define TFT_RS  10
#define TFT_CS  8
#define TFT_SDI 11
#define TFT_CLK 13
#define TFT_LED 0

#define TFT_BRIGHTNESS 200

#define BUTTON_UP 4
#define BUTTON_DOWN 5
#define BUTTON_RIGHT 6
#define BUTTON_LEFT 3
#define BUTTON_ENTER 2

TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);

const uint8_t ARROW_BACK[] PROGMEM = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0xFF, 0x0F, 0x60, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x84, 0x97, 0x01, 0x48, 0xCA, 0xD0, 0x00, 0x48, 0x51, 0x70, 0x00, 0x38, 0x5F, 0x30, 0x00, 0x48, 0x51, 0x70, 0x00, 0x48, 0xD1, 0xD0, 0x00, 0x38, 0x91, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char "
};
const uint8_t ARROW_NEXT[] PROGMEM = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0xF0, 0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xBE, 0xE8, 0x03, 0x98, 0x82, 0x8D, 0x00, 0x98, 0x02, 0x87, 0x00, 0xA8, 0x1E, 0x82, 0x00, 0xC8, 0x02, 0x87, 0x00, 0xC8, 0x82, 0x8D, 0x00, 0x88, 0xBE, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char #
};

void drawArrowBitmap(const uint8_t *ARROW, int color, int x, int y, bool isBold)
{
  if(isBold)
    tft.drawRectangle(x, y, x + 32, y + 32, color);
  tft.drawXBitmap(x, y, ARROW, 32, 32, color);
}
void screenClear()
{
  tft.clear();
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
}
  

boolean flag = false;

// Setup
void setup() {
  tft.begin();
  Serial.begin(9600);

  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_RIGHT, INPUT_PULLUP);
  pinMode(BUTTON_LEFT, INPUT_PULLUP);
  pinMode(BUTTON_ENTER, INPUT_PULLUP);

  tft.setOrientation(1);
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
}

void loop() {
  drawArrowBitmap(ARROW_BACK, 0xFFFF, 5, tft.maxY() - 38, false);
  delay(2000);
  screenClear();
  drawArrowBitmap(ARROW_BACK, 0xFFFF, 5, tft.maxY() - 38, true);
  delay(2000);
  screenClear();
  drawArrowBitmap(ARROW_NEXT, 0xFFFF, tft.maxX() - 38, tft.maxY() - 38, false);
  delay(2000);
  screenClear();
  drawArrowBitmap(ARROW_NEXT, 0xFFFF, tft.maxX() - 38, tft.maxY() - 38, true);
  delay(2000);
  screenClear();
}
